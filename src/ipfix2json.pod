##  ipfix2json manual page   -*- mode: text; fill-column: 79 -*-

##  Copyright 2019-2023 Carnegie Mellon University
##  See license information in LICENSE.txt.

=pod

=head1 NAME

B<ipfix2json> - Print contents of an IPFIX file as json text

=head1 SYNOPSIS

 ipfix2json [--in FILE_NAME] [--out FILE_NAME]
            [--rfc5610] [--element-file FILE_NAME]
            [--cert-element-path DIRECTORY_NAME]
            [--templates] [--data]
            [--full-structure] [--allow-duplicates]
            [--octet-format FORMAT]

 ipfix2json [--version]

 ipfix2json [--help]

=head1 DESCRIPTION

B<ipfix2json> is a tool to read an IPFIX file and print its contents as
json.  B<ipfix2json> prints templates, data records, options templates, and
options records to the output.

B<ipfix2json> supports IPFIX structured data in the form of basicLists,
subTemplateLists, and subTemplateMultiLists.  By default some of these
container structures are not represented as they are in IPFIX, favoring
a simpler format more conducive to the json format.  For more information 
read about B<--full-structure> below.

By default, B<ipfix2json> reads the IPFIX file from the standard input and
writes the text to the standard output.  To specify the input or output file's
location, use the B<--in> or B<--out> option, respectively.

Information elements whose data type is a time stamp are printed as a string in
ISO-8601 format with no C<T> between the date and time and fractional seconds
if needed, for example, C<"2005-09-21 13:03:56.748Z">.

IP addresses are printed as a string in the dotted-quad format for IPv4 and
C<:>-separated hexadecimal for IPv6.

Information elements of data type C<string> are printed as string and use the
escape sequence C<\u0000> for control characters and non-ASCII characters.

Elements of type C<octetArray> are printed using base64 encoding by default,
and the B<--octet-format> option may be used to change this as described in the
L</OPTIONS> section below.  The user is required to know which elements are
string and which are octetArray.

B<ipfix2json> requires the input file to contain the IPFIX templates that
describe the data records within the file, and the template must appear before
the records that use it.  Any records that do not have a corresponding template
are ignored.

The default information model used by B<ipfix2json> includes the standard
information elements defined by
L<IANA|https://www.iana.org/assignments/ipfix/ipfix.xhtml> provided by
libfixbuf, and the CERT private enterprise information elements used by the 
NetSA tools B<yaf(1)>, B<pipeline(8)>, B<super_mediator(1)>, and 
B<rwsilk2ipfix(1)>.  The CERT information element definitions are provided by
the file named F<cert_ipfix.xml>. B<ipfix2json> checks several directories to 
attempt to find this file, stopping once it finds the first file.  An 
additional path can be added to the search path by using the 
B<--cert-element-path> option.  The list of directories, in search order, is

=over 4

=item *

the directory F<../share/libfixbuf> relative to the directory containing the
application

=item *

the F<libfixbuf> subdirectory of the C<datadir> directory specified when
B<ipfix2json> was configured (defaults to F<$prefix/share>)

=item *

the F<share/libfixbuf> subdirectory installation folder for the GLib-2 library

=item *

the F<libfixbuf> subdirectory of the directories specified by the
$XDG_DATA_DIRS environment variable, or F</usr/local/share> and
F</usr/share/libfixbuf> when that variable is empty

=back

B<ipfix2json> exits with an error if it is unable to find the F<cert_ipfix.xml>
file.  See L<https://tools.netsa.cert.org/cert-ipfix-registry/> for additional
information about this file.

There are two ways to augment the set of elements in B<ipfix2json>'s information
model:

=over 4

=item 1

The B<--rfc5610> option instructs B<ipfix2json> to watch the input for options
records that define private enterprise information elements (as defined by
L<RFC5610|https://tools.ietf.org/html/rfc5610.html>) and to add those elements
to the information model.

=item 2

The B<--element-file=I<FILE_NAME>> option tells B<ipfix2json> to parse the
contents of I<FILE_NAME> and add those information elements to the information
model.  The argument is an XML file whose schema is that used by IANA's L<XML
Information Element Registry|https://www.iana.org/assignments/ipfix/ipfix.xml>,
with the following additions:

=over 4

=item cert:enterpriseId

A number representing the Private Enterprise Number of the element

=item cert:reversible

A boolean value (C<true>, C<yes>, or C<1> for true; C<false>, C<no>, or C<0>
for false) that specifies whether the element may have a separate identity in a
reverse flow.

=back

The B<--element-file> option may be used multiple times to load multiple files,
and the loaded elements replace existing elements with the same identifier.

=back

=head1 OPTIONS

The following options are available for B<ipfix2json>:

=over 4

=item B<--in> I<FILE_NAME>

Sets the input file name to I<FILE_NAME>.  When the option is not specified,
B<ipfix2json> reads from the standard input or exits with an error when the
standard input is a terminal.  B<ipfix2json> reads from the standard input if
I<FILE_NAME> is 'C<->'.

=item B<--out> I<FILE_NAME>

Sets the output file name to I<FILE_NAME>.  If I<FILE_NAME> exists, it is
overwritten.  The string 'C<->' may be used to write to standard output (the
default).  Short option: B<-o>.

=item B<--rfc5610>

Tells B<ipfix2json> to scan the IPFIX input file for options records that define
private enterprise information elements and to add those elements to the
information model.

=item B<--element-file> I<FILE_NAME>

Loads the XML file I<FILE_NAME> and incorporates information element
information found in it.  The format of the file is described above.  The
option may be used multiple times to load multiple files, and later elements
replace existing elements when they have the same identifier.  Short option: B<-e>.

=item B<--cert-element-path> I<DIRECTORY_NAME>

Adds I<DIRECTORY_NAME> to the search path for the CERT information element
XML file.  This file must be located to properly process YAF and Super Mediator
output.  Short option: B<-c>.

=item B<--templates>

Suppresses the printing of records, causing the output to contain only
template records.  Short option: B<-t>.

=item B<--data>

Suppresses the printing of templates, causing the output to contain only data
records.  Short option: B<-d>.

=item B<--full-structure>

Produces json output that does not collapse any intermediate containers such
as basicLists, subTemplateLists, and subTemplateMultiLists.  The result of
which resembles the original IPFIX structures more closely.  A comparison of
the outputs is given in L</EXAMPLES> below.

=item B<--allow-duplicates>

Potentially creates invalid JSON by allowing an object to contain duplicate
keys.  By default, when a template contains repeated information elements,
B<ipfix2json> prints the first instance using the element's name (for example
C<templateId>), the second instance using the name and the suffix "-2"
(C<templateId-2>), the third instance with the suffix "-3", et cetera.  A
similar suffix is added when record a contains multiple subTemplateLists that
use the same template.  Using this option causes B<ipfix2json> to disable use
of these suffixes, which may make the output more human-readable.

=item B<--octet-format> I<FORMAT>

Determines the output format of data record elements whose type is
C<octetArray>.  The default format is C<base64>.

=over 4

=item base64

Displays the value using base-64 encoding, e.g., C<"Zm9vCg==">.

=item string

Displays C<octetArray> values in the same form as C<string>
values. Specifically, displays octets from 32 (space) to 126 (tilde) inclusive
as ASCII except for octet value 34 (displayed as C<\">) and 92 (C<\\>).  All
other values are displayed as escaped utf-8.  For example, C<"foo\u000A"> where
C<\u000A> represents a newline.

=item hexadecimal

Outputs the hexadecimal value for each octet in the octetArray, e.g.,
C<"666f6f0a">.

=item empty

Outputs an empty string as the value, C<"">.

=back

=item B<--version>

Prints version and copyright information to standard error and exits.  Short
option: B<-V>.

=item B<--help>

Prints a brief usage message to the standard output and exits.  Short option:
B<-h>.

=back

=head1 EXAMPLES

In the following examples, the dollar sign ("$") represents the shell
prompt.  The text after the dollar sign represents the command line.

 $ ipfix2json --in - --out -

 $ ipfix2json --in /data/ipfix.ipfix --out /data/text.txt

=head2 Condensed vs Full Structure output

B<ipfix2json> supports IPFIX structured data in the form of basicLists,
subTemplateLists, and subTemplateMultiLists.  By default some of these
container structures are not represented as they are in IPFIX, favoring
a simpler format more conducive to the json format.

By default (condensed) output resembles the following:

 {
     "template:0x123()": {
         "informationElementText": "value",
         "informationElementInt": 123,
         "template:0x456()": [
             {
                 "informationElementText": "value",
                 "informationElementInt": 123
             }
         ],
         "template:0x789()": [
             {
                 "informationElementInt": [789,456],
                 "informationElementText": ["abc","def"]
             }
         ]
     }
 }

When B<--full-structure> is used, B<ipfix2json> does not collapse any
intermediate containers such as basicLists, subTemplateLists, and
subTemplateMultiLists.  The result of which resembles the original IPFIX
structures more closely:

 {
     "template:0x123()": {
         "informationElementText": "value",
         "informationElementInt": 123,
         "subTemplateMultiList": {
             "template:0x456()": [
                 {
                     "informationElementText": "value",
                     "informationElementInt": 123
                 }
             ],
             "template:0x789()": [
                 {
                     "basicList": {
                         "informationElementInt": [789,456]
                     },
                     "basicList": {
                         "informationElementText": ["abc","def"]
                     }
                 }
             ]
         }
     }
 }

NOTE: No content other than container information elements is added or removed
with either format.

=head1 AUTHORS

Emily Sarneso, Matt Coates and the CERT Network Situational Awareness Group
Engineering Team, E<lt>http://www.cert.org/netsaE<gt>.

Bug reports may be sent directly to the Network Situational Awareness team at
E<lt>netsa-help@cert.orgE<gt>.

=head1 SEE ALSO

B<yaf(1)>, B<yafscii(1)>, B<yafdpi(1)>, B<super_mediator(1)>, B<pipeline(8)>,
B<rwsilk2ipfix(1)>, L<https://tools.netsa.cert.org/cert-ipfix-registry/>,
L<https://www.iana.org/assignments/ipfix/ipfix.xhtml>

=cut

##  @DISTRIBUTION_STATEMENT_BEGIN@
##  libfixbuf 3.0.0
##
##  Copyright 2022 Carnegie Mellon University.
##
##  NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
##  INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
##  UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
##  AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
##  PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
##  THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF
##  ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
##  INFRINGEMENT.
##
##  Released under a GNU GPL 2.0-style license, please see LICENSE.txt or
##  contact permission@sei.cmu.edu for full terms.
##
##  [DISTRIBUTION STATEMENT A] This material has been approved for public
##  release and unlimited distribution.  Please see Copyright notice for
##  non-US Government use and distribution.
##
##  Carnegie Mellon(R) and CERT(R) are registered in the U.S. Patent and
##  Trademark Office by Carnegie Mellon University.
##
##  This Software includes and/or makes use of the following Third-Party
##  Software subject to its own license:
##
##  1. GLib-2.0 (https://gitlab.gnome.org/GNOME/glib/-/blob/main/COPYING)
##     Copyright 1995 GLib-2.0 Team.
##
##  2. Doxygen (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)
##     Copyright 2021 Dimitri van Heesch.
##
##  DM22-0006
##  @DISTRIBUTION_STATEMENT_END@
